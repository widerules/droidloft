<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">WiEngineDemos_native</string>
    
    <!-- used by label test -->
    <string name="test_string">多行标签, 可以指定一个宽度, 字符串超过宽度时会折行, hello world, 中英文混排</string>
    
    <!-- category description -->
    <string name="node_desc">演示WiEngine提供的各种节点类型, 节点类似于Android中的View或者iOS中的UIView, 它是构成游戏界面的基本元素</string>
    <string name="action_desc">演示基本动作的使用方法</string>
    <string name="box2d_desc">Box2D是著名的开源2D物理引擎, 支持更多高级特性, WiEngine提供了wyBox2D类使其可以成为节点被添加到场景中</string>
    <string name="chipmunk_desc">Chipmunk是一个简洁小巧的2D物理引擎, WiEngine对Chipmunk做了包装和改进使其更方便使用, 并提供了wyChipmunk类使其可以成为节点被添加到场景中</string>
    <string name="ease_action_desc">演示Ease动作的使用方法, Ease动作可以将线性时间变成非线性时间, 从而改变动作的效果</string>
    <string name="events_desc">演示WiEngine如何处理系统事件, 如触摸, 按键, 加速器等</string>
    <string name="grid_action_desc">演示网格动作的使用方法, 网格动作都是基于网格实现, 因此把它们单独分类, 网格动作需要某些OpenGL扩展.</string>
    <string name="other_desc">演示一些暂时不好分类的功能和辅助性的功能</string>
    <string name="particle_desc">演示粒子系统的使用方法和效果, 粒子系统可以用来实现各种炫酷特效</string>
    <string name="transition_desc">演示场景之间的切换特效</string>
    <string name="lua_desc">WiEngine集成了Lua脚本语言支持, 这里的例子演示如何在WiEngine中使用Lua脚本语言. 大部分的WiEngine API都可以在lua中使用, 用法和C++完全一样, 只不过语法有些小区别.</string>
    <string name="sound_desc">演示如何在WiEngine中使用声音引擎播放背景音乐和游戏音效</string>
    <string name="network_desc">WiEngine集成了libcurl, 也提供了一些简单的封装, 可以通过这些模块实现网络访问的功能</string>
    <string name="persistence_desc">如何使用WiEngine提供的封装类进行数据的持久化</string>
    
    <!-- activity description -->
    <string name="MenuTest_desc">如何创建菜单和菜单项并响应点击事件</string>
    <string name="ClickAndMoveTest_desc">响应点击事件并根据点击位置移动一个图片</string>
    <string name="LabelTest_desc">如何创建标签节点</string>
    <string name="TextureAtlasTest_desc">如何创建和渲染TextureAtlas对象</string>
    <string name="AtlasLabelTest_desc">如何创建图片集标签节点, 图片集标签的文字实际上是图片集中的图片, 因此可以使用任何字体</string>
    <string name="TGATileMapAtlasTest_desc">如何创建一个TGA瓦片地图, TGA文件保存了地图的布局, 而地图的元素保存在另外一个图片集中</string>
    <string name="ArrayTileMapAtlasTest_desc">如何创建一个数组式瓦片地图, 数组式瓦片地图的好处是可以使用代码在运行时动态生成地图</string>
    <string name="AtlasSpriteTest_desc">演示如何从图片集创建一个图片节点</string>
    <string name="ImageSpriteTest_desc">演示如何从单张图片创建一个图片节点</string>
    <string name="SceneTest_desc">如何使用场景, 已经如何在场景中切换. 欲了解更多切换效果请浏览Transition分类下的示例</string>
    <string name="DrawPrimitivesTest_desc">如何使用WiEngine封装的一些基本绘图操作</string>
    <string name="VerletRopeTest_desc">如何使用wyVerletRope模拟, 渲染一条绳子</string>
    <string name="LeftRightPushTest_desc">新旧场景向左右推出的切换效果, Push表示旧场景会被新场景逐渐挤走</string>
    <string name="TopBottomPushTest_desc">新旧场景向上下推出的切换效果, Push表示旧场景会被新场景逐渐挤走</string>
    <string name="LeftRightSlideTest_desc">新场景从左右两侧逐渐滑入的切换效果, Slide表示旧场景不会移动, 只是新场景逐渐滑入把旧场景覆盖</string>
    <string name="TopBottomSlideTest_desc">新场景从上下逐渐滑入的切换效果, Slide表示旧场景不会移动, 只是新场景逐渐滑入把旧场景覆盖</string>
    <string name="TopBottomSlideBounceTest_desc">通过设置Ease动作, 把原本线性的过场动画变换为非线性, 为过场效果添加了更多的可能性. 该示例使用和TopBottomSlide一样的效果, 但是由于指定了EaseBounce效果, 具有完全不一样的感觉</string>
    <string name="JumpZoomTest_desc">新旧场景缩小后以跳跃的方式切换</string>
    <string name="ColorFadeTest_desc">一个纯色进行淡入淡出的效果, 完成新旧场景的切换</string>
    <string name="MultiplexLayerTest_desc">演示如何使用MultiplexLayer包装多个层, 但是同时只有一个层可见. 例子中包含了红绿蓝三个色层</string>
    <string name="GradientColorLayerTest_desc">演示如何使用GradientColorLayer显示渐变色层, 设置起始颜色, 结束颜色和渐变角度</string>
    <string name="MoveByTest_desc">使用MoveBy动作进行节点的移动操作, MoveBy只需要指定移动的距离</string>
    <string name="MoveByAngleTest_desc">使用MoveByAngle动作进行节点的移动操作, 节点按照给定的方向移动, MoveByAngle需要指定移动的时间, 起始点, 角度, 速度</string>
    <string name="MoveByPathTest_desc">使用MoveByPath动作进行节点的移动操作, 节点按照指定的路径移动, MoveByPath可以添加任意点到路径中</string>
    <string name="MoveToTest_desc">使用MoveTo动作进行节点的移动操作, MoveTo需要指定移动的起始点和结束点</string>
    <string name="ScaleByTest_desc">使用ScaleBy进行节点的缩放, ScaleBy只需要指定缩放的比例</string>
    <string name="ScaleToTest_desc">使用ScaleBy进行节点的缩放, ScaleTo需要指定缩放的起始比例和结束比例</string>
    <string name="FadeToTest_desc">使用FadeTo动作产生淡入淡出效果, FadeTo需要指定起始和结束的透明度</string>
    <string name="FollowTest_desc">使用Follow动作产生跟踪节点效果</string>
    <string name="HypotrochoidTest_desc">使用Hypotrochoid动作内旋轮线运动, 支持椭圆,圆运动</string>
    <string name="FadeInOutTest_desc">使用FadeIn和FadeOut产生淡入淡出效果, FadeIn的结束透明度是255, FadeOut的结束透明度是0</string>
    <string name="BlinkTest_desc">使用Blink使节点闪烁</string>
    <string name="JumpByTest_desc">使用JumpBy使节点跳跃, JumpBy只需要指定跳跃的偏移量</string>
    <string name="JumpToTest_desc">使用JumpTo使节点跳跃, JumpTo需要指定跳跃的起始和结束点</string>
    <string name="RotateByTest_desc">使用RotateBy使节点旋转, RotateBy只需要指定旋转的偏移角度</string>
    <string name="RotateToTest_desc">使用RotateTo市节点旋转, RotateTo需要指定旋转的起始和结束角度</string>
    <string name="TintByTest_desc">使用TintBy修改节点的色调, TintBy只需要指定色调的改变值</string>
    <string name="TintToTest_desc">使用TintTo修改节点的色调, TintTo需要指定起始颜色和结束颜色</string>
    <string name="BezierTest_desc">如何使用Bezier动作使节点在一条贝塞尔曲线上运动</string>
    <string name="LagrangeTest_desc">如何使用Lagrange动作使节点在一条拉格朗日曲线上运动</string>
    <string name="DelayShowHideTest_desc">通过DelayTime, Show和Hide的组合使用, 产生类似于Blink的效果</string>
    <string name="FlipXTest_desc">新旧场景以y轴为转动轴旋转180度, 完成切换效果</string>
    <string name="OrbitCameraFlipXTest_desc">也是以y轴为转动轴旋转180度, 但是是通过修改相机位置实现的, 用的是Camera相关动作</string>
    <string name="FlipYTest_desc">新旧场景以x轴为转动轴旋转180度, 完成切换效果</string>
    <string name="ZoomFlipXTest_desc">新旧场景以y轴为转动轴旋转180度, 同时带有缩小的效果</string>
    <string name="ZoomFlipYTest_desc">新旧场景以x轴为转动轴旋转180度, 同时带有缩小的效果</string>
    <string name="FlipAngularTest_desc">新旧场景以一个斜向轴为转动轴旋转180度</string>
    <string name="ZoomFlipAngularTest_desc">新旧场景以一个斜向轴为转动轴旋转180度, 同时带有缩小的效果</string>
    <string name="GridFlipXTest_desc">使用网格对画面以y轴为转动轴旋转180度</string>
    <string name="GridFlipYTest_desc">使用网格对画面以x轴为转动轴旋转180度</string>
    <string name="Lens3DTest_desc">使图像呈现出似乎是处于一个放大镜下的效果</string>
    <string name="LiquidTest_desc">使图像呈现出似乎是处于水中的效果</string>
    <string name="Ripple3DTest_desc">就好像图像是映射在水中, 同时你往水中扔了一个石子</string>
    <string name="Shaky3DTest_desc">图像的每个部分都在抖动</string>
    <string name="TwirlTest_desc">使图像呈现被扭曲的效果</string>
    <string name="SuckTest_desc">屏幕图像收缩于一点, 就好像吸面条一样</string>
    <string name="WavesTest_desc">图像呈现在水中的效果, 各个部分按照波浪式渐进变化</string>
    <string name="Waves3DTest_desc">图像呈现在水中的效果, 各个部分按照波浪式渐进变化, 和WavesTest不同的是, 它在z方向有变化</string>
    <string name="TilesShrinkOutTest_desc">图像分成网格逐个缩小直至全部消失</string>
    <string name="LineShrinkOutTest_desc">图像以行为单位逐行缩小消失</string>
    <string name="ShakyTiles3DTest_desc">图像的每个部分都在抖动, 和Shaky不同, 它在z方向也有抖动效果</string>
    <string name="ShatterTiles3DTest_desc">将图像分成网格, 每个网格进行随机的打乱, 在z方向也有打乱效果</string>
    <string name="ShuffleTilesTest_desc">把图像分成网格, 对网格进行洗牌重排列</string>
    <string name="TurnOffTilesTest_desc">把图像分成网格, 这些网格随机消失直至全部消失</string>
    <string name="WavesTiles3DTest_desc">以网格为单位进行波浪式效果, 在z方向也有变化</string>
    <string name="JumpTiles3DTest_desc">每个网格都在z方向上变动, 看起来像是在跳动一样</string>
    <string name="SplitRowsColsTest_desc">图像以行或列为单位, 交错式的向相反的方向移动直至消失</string>
    <string name="ShrinkOutTilesTest_desc">旧场景以网格方式逐渐消失从而显示出新场景</string>
    <string name="PageTurn3DTest_desc">用网格实现翻页效果</string>
    <string name="PageTurn3DTransitionTest_desc">用翻页效果实现新旧场景切换</string>
    <string name="RotateZoomTest_desc">旧场景一边旋转一遍缩小, 新场景一边旋转一边变大</string>
    <string name="ShrinkGrowTest_desc">旧场景缩小, 新场景变大, 完成切换</string>
    <string name="SplitRowsColsTransitionTest_desc">旧场景以行列交错式的移动消失, 从而显示出新场景</string>
    <string name="TurnOffTilesTransitionTest_desc">旧场景以网格为单位随机消失, 显示出新场景完成切换</string>
    <string name="AtlasAnimationTest_desc">演示图片集动画, 动画的帧都是来自于一个图片集中</string>
    <string name="ParallaxTest_desc">演示如何使用视差节点, 视差节点可以让人形成物体远近不同的感觉, 适合于构建多层场景</string>
    <string name="MotionStreakTest_desc">演示如何使用动作跟踪节点, 可以往动作跟踪节点中添加坐标, 这些坐标将被连接起来反馈在屏幕上, 形成物体经过的轨迹</string>
    <string name="ProgressToTest_desc">演示如何使用ProgressTo动作把任意图片变成进度条, ProgressTo需要指定起始和结束角度</string>
    <string name="ProgressByTest_desc">演示如何使用ProgressBy动作把任意图片变成进度条, ProgressBy只需要指定变化的角度</string>
    <string name="AccelerometerTest_desc">演示如何在WiEngine中处理加速器事件</string>
    <string name="KeyTest_desc">演示如何在WiEngine中处理按键事件</string>
    <string name="ModernArtTest_desc">用粒子系统显示一个旋转的粒子风</string>
    <string name="FireworkTest_desc">用粒子系统实现焰火效果</string>
    <string name="FireTest_desc">用粒子系统实现火焰效果</string>
    <string name="SunTest_desc">用粒子系统模拟一个太阳</string>
    <string name="GalaxyTest_desc">用粒子系统模拟星系效果</string>
    <string name="FlowerTest_desc">单点持续释放彩色物体, 所谓花朵绽放</string>
    <string name="BigFlowerTest_desc">单点持续释放彩色物体, 所谓花朵绽放</string>
    <string name="RotateFlowerTest_desc">单点持续释放彩色物体, 同时带有旋转</string>
    <string name="MeteorTest_desc">用粒子系统模拟流星效果</string>
    <string name="SpiralTest_desc">一个旋转前进的带状粒子条</string>
    <string name="ExplosionTest_desc">用粒子系统模拟烟花的爆炸效果</string>
    <string name="SmokeTest_desc">用粒子系统模拟烟雾效果</string>
    <string name="SnowTest_desc">用粒子系统模拟下雪</string>
    <string name="RainTest_desc">用粒子系统模拟下雨</string>
    <string name="RingTest_desc">用粒子系统生成一个光环</string>
    <string name="CrossFadeTest_desc">旧场景渐渐消失, 新场景渐渐出现</string>
    <string name="AnimationTest_desc">动画的使用, 动画的帧来自于不同的独立图片</string>
    <string name="BounceTest_desc">最基本的chipmunk示例, 演示如果创建一个空间并添加刚体</string>
    <string name="OneWayTest_desc">演示如何利用碰撞监听器处理碰撞</string>
    <string name="PlanetTest_desc">演示如何使用自定义的速度更新器来用chipmunk模拟一个行星</string>
    <string name="PlayerTest_desc">演示如何将系统事件处理和控制刚体运动结合起来</string>
    <string name="PyramidStackTest_desc">更多的刚体, 更多的元素, 虽然没有演示什么新的内容, 但是很有趣</string>
    <string name="PyramidToppleTest_desc">更多的刚体（都是线段）, 更多的元素, 虽然没有演示什么新的内容, 但是很有趣</string>
    <string name="PlinkTest_desc">大量运动物体和静态物体之间的碰撞测试, 用到了IBodyVisitor接口</string>
    <string name="PumpTest_desc">了解如何使用约束, 物体之间的在约束的限制下是如何联动的</string>
    <string name="JointsTest_desc">各种连接点的效果和使用方法</string>
    <string name="LogoSmashTest_desc">一个点击碎一个有无数个点组成的Chipmunk Logo, 由于刚体太多, 这个示例的性能很差. 所以我们并不在iOS和Android上演示它.</string>
    <string name="QueryTest_desc">演示如何使用查询方法来找到可能的碰撞, 从而调整物体的大小和尺寸</string>
    <string name="SensorTest_desc">传感器是一类特殊的物体, 它们可以产生碰撞, 但是不会真正去处理它. 想想看可以用它做什么吧</string>
    <string name="SimpleTest_desc">非常简单的一个例子, 一个物体从上面落下</string>
    <string name="SpringTest_desc">演示如何使用弹簧约束</string>
    <string name="TankTest_desc">比较大的那个方块是坦克, 控制它移动撞开其他小方块, 有趣的例子</string>
    <string name="TheoJansenTest_desc">Theo Jansen是一个荷兰艺术家和动力学雕塑家, 这里例子构建一个这样的东西, 不过很初级</string>
    <string name="TumbleTest_desc">模拟一个滚筒洗衣机</string>
    <string name="UnsafeOpsTest_desc">在Chipmunk中修改物体的大小是不安全的, 但是并不是不能用, 只要保证不要在step的范围内使用就可以了</string>
    <string name="ButtonTest_desc">演示如何使用按钮, 按钮具有正常, 选择和禁止三态</string>
    <string name="NinePatchButtonTest_desc">演示如何使用拉伸式图片, 通过拉伸式图片我们可以构造拉伸式按钮. 其实仍然是Button对象, 只不过Button的状态都是节点, 因此我们可以传入任何节点子类构造按钮. 这里例子我们传入NinePatchSprite, 就得到了拉伸式按钮.</string>
    <string name="AtlasButtonTest_desc">演示如何创建一个button, button的状态图片从图片集中载入</string>
    <string name="TexturedBounceTest_desc">和BounceTest逻辑一致, 只不过使用了非Debug渲染模式, 且物体有贴图, 从这里可以了解如何给物体设置贴图</string>
    <string name="TexturedEdgeShapesTest_desc">和EdgeShape逻辑一致, 只不过使用了非Debug渲染模式, 且物体有贴图, 从这里可以了解如何给物体设置贴图</string>    
    <string name="TexturedOneWayTest_desc">和OneWayTest逻辑一致, 只不过使用了非Debug渲染模式, 且物体有贴图</string>
    <string name="ZwoptexTest_desc">Zwoptex是Mac下一个用来把单幅图片拼装成图片集的工具, 它会生成一个XML的描述文件, 从这个描述文件可以直接载入图片集中的图片信息. 此外, 还有另外一个叫做Texture Packer的软件, 也可以用来编辑图片集, 而且导出格式和Zwoptex是一样的, 因此WiEngine也支持Texture Packer. Texture Packer功能上比Zwoptex强大一些, 而且支持Mac OS和Windows.</string>
    <string name="XMLLayoutTest_desc">演示如何使用Android的XML布局文件帮助你定位节点, 这种方式可以节省代码并且对不同屏幕大小有更好的兼容性</string>
    <string name="TransparentDrawPrimitivesTest_desc">演示如何使用使用透明背景, 如果一定要让使用透明背景, 游戏的activity必须设置android:theme为@android:style/Theme.Translucent, 另外要注意: 透明背景在有些机型上可能无法正常工作</string>
    <string name="BodyDraggingTest_desc">演示如何通过触摸事件拖动一个刚体</string>
    <string name="TMXOrthogonalTest_desc">演示如何使用正交型TMX地图. TMX是Mac下的瓦片地图编辑器Tiled Qt支持的导出格式, TMX是XML的格式, 它可以记录地图信息并且支持层和对象组. 在地图的形式上, TMX支持正交型, 等角型和六边形. </string>
    <string name="TMXIsometricTest_desc">演示如何使用等角型TMX地图. TMX是Mac下的瓦片地图编辑器Tiled Qt支持的导出格式, TMX是XML的格式, 它可以记录地图信息并且支持层和对象组. 在地图的形式上, TMX支持正交型, 等角型和六边形. </string>
    <string name="TMXHexagonalTest_desc">演示如何使用六边形TMX地图. TMX是Mac下的瓦片地图编辑器Tiled Qt支持的导出格式, TMX是XML的格式, 它可以记录地图信息并且支持层和对象组. 在地图的形式上, TMX支持正交型, 等角型和六边形. </string>
    <string name="ShapeAnimationTest_desc">演示如何在一个Shape上执行一个动画效果</string>
    <string name="FixtureAnimationTest_desc">演示如何在一个Fixture上执行一个动画效果</string>
    <string name="CallFuncTest_desc">演示如何使用CallFunc动作, 并且可以了解如何使用WiEngine 1.7.1中新增的TargetSelector对象</string>
    <string name="SchedulerTest_desc">演示如何使用Schduler进行某个方法的调度, 以及TargetSelector的使用</string>
    <string name="VideoPlayingTest_desc">wyUtils中有playVideo方法可以用来播放一段视频, 如果有视频播放的需求, 直接使用这个方法节省开发时间. 播放视频的实现是平台相关的, 在Android平台上要记得在AndroidManifest.xml中添加com.wiyun.engine.utils.VideoPlayingActivity</string>
    <string name="CharacterMoveTest_desc">演示用点击事件控制一个小人的走动, 同时带有走动的动画效果</string>
    <string name="CreateLabelTest_desc">比较简单的Lua例子, 用lua脚本创建一个wyLabel对象放到屏幕中间</string>
    <string name="SplitWordsTest_desc">分割一个英文句子里的单词, 句子是通过C++代码传入lua的, 然后lua创建了一个wyBitmapFontLabel把结果显示出来</string>
    <string name="CreateButtonTest_desc">用Lua创建wyButton</string>
    <string name="CreateAnimationTest_desc">用Lua创建动画并播放</string>
    <string name="MultiTouchTest_desc">在WiEngine中处理Multi Touch, 该例子演示如何使用Multi Touch缩放一个Sprite对象</string>
    <string name="PVRSpriteTest_desc">演示如何使用PVR格式的贴图文件</string>
    <string name="ProgressTimerTest_desc">演示如何使用ProgressTimer节点类型, ProgressTimer也被包装在ProgressTo/By中用来实现动态的进度条效果</string>
    <string name="DoubleTapTest_desc">演示如何处理双击事件</string>
    <string name="GestureTest_desc">演示如何处理手势</string>
    <string name="ParticleDesignerTest_desc">Particle Designer一个粒子效果设计工具, WiEngine支持从它生成的描述文件中载入粒子效果</string>
    <string name="AStarTest_desc">演示AStar Find Path, 支持斜线,六边行地图查找路径,可以自己设置障碍物</string>
    <string name="MemoryFileSystemTest_desc">通过WiEngine附带的Filewrap工具, 可以把文件转换成二进制数据, 然后通过getFile方法根据文件名称获得文件数据. 内存文件系统可以稍微提高资源载入速度. </string>
    <string name="MagnetsElectricTest_desc">通过自定义的力量算法, 模拟磁性物体互相吸引的现象</string>
    <string name="MP3Test_desc">演示播放mp3文件</string>
    <string name="OGGTest_desc">演示播放ogg文件</string>
    <string name="WAVTest_desc">演示播放Wav文件</string>
    <string name="BreakableTest_desc">演示如何检测碰撞力度, 力度如果太大, 可以动态取消物体关联</string>
    <string name="BridgeTest_desc">使用RevoluteJoint连接多个物体成索桥状</string>
    <string name="ApplyForceTest_desc">演示如何通过程序给一个刚体施加力并改变力矩</string>
    <string name="BodyTypesTest_desc">演示各种不同的刚体类型</string>
    <string name="BulletTest_desc">随机生成一个高速物体和其它物体产生撞击</string>
    <string name="CantileverTest_desc">演示如何使用WeldJoint连接多个物体, 由于Box2D是迭代的计算物体位置, 因此被WeldJoint连接的物体呈现一个柔软的特性</string>
    <string name="ChainTest_desc">用RevoluteJoint连接多个物体形成一个链条</string>
    <string name="CollisionFilteringTest_desc">演示如何通过分组或指定类型来过滤掉不需要的碰撞</string>
    <string name="CompoundShapesTest_desc">把多个物体组合起来形成更复杂的组合形物体</string>
    <string name="ConfinedTest_desc">新增加的物体只能被放在一个封闭空间中, 多了那自然就挤了</string>
    <string name="DominosTest_desc">多米诺骨牌</string>
    <string name="EdgeShapesTest_desc">演示如何创建线条形物体, 示例还会演示如何使用RayCast寻找光线与物体碰撞点</string>
    <string name="GearsTest_desc">演示GearJoint的创建和效果</string>
    <string name="CarTest_desc">用Box2D创建一个汽车, 里面用到了WheelJoint</string>
    <string name="PulleysTest_desc">演示PulleyJoint的创建和效果</string>
    <string name="PyramidTest_desc">创建很多个物体, 堆成金字塔形状</string>
    <string name="RopeTest_desc">演示RopeJoint的创建和效果, RopeJoint可以限制物体和连接点之间的最大距离</string>
    <string name="ShapeEditingTest_desc">在运行时通过给刚体附加新的Fixture, 动态的修改物体外形</string>
    <string name="SliderCrankTest_desc">构造了一个曲轴联动装置</string>
    <string name="SphereStackTest_desc">由球形物体堆成的立柱</string>
    <string name="VaryingFrictionTest_desc">给物体设置不同的摩擦力, 看看效果如何</string>
    <string name="VaryingRestitutionTest_desc">给物体设置不同的弹性碰撞补偿系数, 看看效果如何</string>
    <string name="WebTest_desc">DistanceJoint可以限定两个物体间的距离, 如果再给它加个弹性系数, 则又能起到弹簧的效果</string>
    <string name="TiledSpriteTest_desc">TiledSprite可以把一个贴图进行平铺, 适合于构建游戏背景</string>
    <string name="CustomBackTest_desc">缺省情况下Scene将处理back键, 缺省行为是弹出当前场景. 但是你可以自定义back键处理行为, 该示例演示如何在native层自定义处理back键. 注意: 对于非手机平台, 这个示例处理的是回车键</string>
    <string name="RadialCWCCWTest_desc">旧场景以逆时针方向逐渐消失, 显露出新场景. 返回时用顺时针. </string>
    <string name="SpriteExBatchNodeTest_desc">演示如何创建使用BatchNode进行渲染的图片节点</string>
    <string name="SpriteExSelfRenderTest_desc">演示如何创建不使用BatchNode进行渲染的图片节点</string>    
    <string name="MotionWelderTest_desc">Motion Welder是一个动画编辑器, WiEngine支持解析Motion Welder生成的动画文件(*.anu), 示例演示如何使用这一功能</string>    
    <string name="CoverFlowTest_desc">演示如何创建和使用CoverFlow</string>
    <string name="ChainShapeTest_desc">演示如何使用Chain Shape创建一个闭合连接形状</string>
    <string name="TexturedChainShapeTest_desc">演示如何给ChainShape增加贴图绑定</string>     
    <string name="PageControlTest_desc">演示如何使用PageControl控件, PageControl是一个横或竖向的滚动控件, 可以添加Node子类作为项目, 其类似于Android的Gallery控件和iPhone的UIPageControl控件</string>
    <string name="ShakeTest_desc">节点在一个范围内随机运动, 呈现抖动的效果</string>
    <string name="HGETest_desc">HGE ParticleEd是一个粒子系统设计工具, WiEngine支持从它生成的描述文件中载入粒子效果</string>
    <string name="BitmapFontHGETest_desc">演示如何从工具hgefonted生成的字体文件载入字体并显示, 工具hgefonted包含在sdk/tools目录下</string>
    <string name="BitmapFontAngelCodeTest_desc">AngelCode是一种图片字体描述文件格式, 它可能是来源于angelcode.com的原因, 所以起了这个名字. 有不少工具支持生成这种格式的图片字体描述文件, 比如Glyph Designer和Bitmap Font Generator. 比较推荐Glyph Designer, 因为功能比较强大, 使用也很方便, 不过只支持Mac OS X. Bitmap Font Generator只支持Windows, 功能上稍弱一些.</string>
    <string name="BitmapFontText">微云游戏引擎abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</string>
    <string name="TextureLoadUnloadTest_desc">演示如何载入, 删除贴图资源. Demo包含了两个场景, 进入第二个场景之前会载入大量贴图, 退出第二个场景之前会释放掉这些贴图, 这些贴图载入删除操作都是在一个POSIX线程中进行的</string>
    <string name="NodePhysicsTest_desc">可以对节点设置速度和加速度这样简单的物理属性, 对于某些游戏来说, 也许用不到复杂的物理特性, 所以可以直接利用Node提供的简单物理属性, 从而省去使用物理引擎的麻烦</string>
    <string name="ScreenshotTest_desc">通过Director提供的makeScreenshot方法, 可以将当前游戏界面保存为一张PNG图片. 不过截屏操作可能比较费时间, 需要给用户恰当的提示.</string>
    <string name="TextBoxTest_desc">WiEngine提供的TextBox是一个平台无关的文本编辑框封装, 其采用弹框式的输入方式，更适合手机这样的设备特点</string>
    <string name="PhysicsEditorTest_desc">PhysicsEditor是一个物理引擎的物体设计工具，WiEngine支持从它的导出文件中加载和创建物体</string>
    <string name="DownloadImageTest_desc">使用WiEngine封装的libcurl, 实现一个远程下载背景并即时替换的功能, 相当于为游戏带来了主题功能</string>
    <string name="UploadScreenshotTest_desc">使用WiEngine封装的libcurl, 实现一个上传功能, 不过这个demo并不能实际的运作, 因为它需要您填写正确的上传地址和用户名密码等信息才能运作.</string>
    <string name="SliderTest_desc">使用wySlider创建一个可拖动进度条</string>
    <string name="BuoyancyTest_desc">如何使用Box2D中的b2BuoyancyController模拟浮力</string>
    <string name="TensorDampingTest_desc">如何使用阻尼矩阵模拟俯视视角的汽车车轮侧向力</string>
    <string name="ScrollableLayerTest_desc">wyScrollableLayer是一个支持滚动操作的层, 类似于Android中的ScrollView</string>
    <string name="PixelOperationTest_desc">通过RGBA8888的像素数据创建贴图，并进行像素级操作</string>
    <string name="PreferenceTest_desc">通过平台提供的preference功能存储简单的数据, Android和iOS平台都提供了用户设置的模块, WiEngine通过wyPrefs类进行了简单的封装</string>
    <string name="CreateDatabaseTest_desc">创建一个只有一列的sqlite3测试数据库, 并插入一条测试数据, 如果数据库已经存在则不创建</string>
    <string name="TransactionTest_desc">如何使用wyDatabase封装的事务API启动, 提交或回滚事务</string>
    <string name="SQLFileTest_desc">wyDatabase支持载入一个SQL文件进行批量执行</string>
    <string name="PickFromCameraTest_desc">利用wyUtils中封装的跨平台方法, 从摄像头获取一张图片并显示出来. 在Android上您需要额外添加ImagePickerActivity并添加android.permission.CAMERA权限才能正常使用该功能</string>
    <string name="PickFromAlbumTest_desc">利用wyUtils中封装的跨平台方法, 从相册获取一张图片并显示出来. 在Android上您需要额外添加ImagePickerActivity才能正常使用此功能</string>
   	<string name="SpriteXTest_desc">SpriteX是一个动画编辑器, 其功能和架构和Motion Welder有一些相似性, 不过该工具只支持Windows. WiEngine提供了wySPXSprite可以用于播放SpriteX动画, 但仅用于SpriteX 3.9.4版本</string>
	<string name="SpriteX2011Test_desc">SpriteX 2011是SpriteX的最新版本, 且其导出文件格式和3.9.4不兼容, 因此WiEngine使用wySPX3Sprite来支持SpriteX 2011格式的动画. 该工具也只支持windows, 相对于3.9.4, 2011版最大的改进是支持多图</string>
	<string name="PauseResumeActionTest_desc">动作可以暂停以及恢复, 这个例子演示如何使用该功能</string>
	<string name="PauseResumeGameTest_desc">通过pauseUI和resumeUI可以暂停或恢复游戏</string>	
	<string name="VirtualJoystickTest_desc">WiEngine提供了虚拟摇杆的封装, 了解如何使用wyVirtualJoystick类吧</string>		    
    <string name="ColorFilterTest_desc">演示如何通过滤镜动态的改变一个贴图的内容</string>
    <string name="SuckTransitionTest_desc">使用吸入效果进行场景转换</string>
    <string name="ArcticTest_desc">Arctic是一个派生自AuroraGT的动画编辑器, WiEngine支持它的导出格式. 这些编辑器的架构都类似Motion Welder, 因此WiEngine命名为AFC模式动画, 即Animation, Frame, Clip.</string>
    <string name="Box2DCollisionDetectionTest_desc">在不建立World的情况下进行碰撞检测. WiEngine提供了一个wyBox2DCollisionDetector类, 它隐藏了Box2D的实现细节, 把碰撞检测包装成了一些简单的API, 这些API基于节点架构, 易于使用</string>
    <string name="AlphaTestTest_desc">如何使用alpha测试来控制精灵显示的区域</string>
    <string name="AuroraGTTest_desc">AuroraGT是GameLoft设计的游戏工具, 动画编辑是它的一个功能. WiEngine支持载入AuroraGT的动画导出文件</string>
    <string name="ClipMappingAuroraGTTest_desc">将分片映射规则应用于动画从而得到不同的效果, 这里例子演示如何从AuroraGT导出的Module Mapping文件中创建分片映射规则</string>
</resources>
